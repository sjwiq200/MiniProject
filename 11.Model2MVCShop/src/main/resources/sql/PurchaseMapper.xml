<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PurchaseMapper">
 	
 	<!-- DTD오류 ==> 결과요소가 연관요소보다 먼저 나와야합니다! -->
	<resultMap id="purchaseSelectMap" type="purchase">
		<result property="tranNo" column="tran_no" jdbcType="INTEGER"/>
		<result property="paymentOption" column="payment_option" jdbcType="VARCHAR"/>
		<result property="receiverName" column="receiver_name" jdbcType="INTEGER"/>
		<result property="receiverPhone" column="receiver_phone" jdbcType="VARCHAR"/>
		<result property="divyAddr" column="demailaddr" jdbcType="DATE"/>
		<result property="divyRequest" column="dlvy_request" jdbcType="VARCHAR"/>
		<result property="tranCode" column="tran_status_code" jdbcType="VARCHAR"/>
		<result property="orderDate" column="order_data" jdbcType="VARCHAR"/>
		<result property="divyDate" column="dlvy_date" jdbcType="VARCHAR"/>
		<result property="purchaseCount" column="purchase_count" jdbcType="INTEGER"/>
		<!-- <result property="purchaseProd" column="prod_no" jdbcType="VARCHAR"/> -->
		<!-- <result property="buyer" column="buyer_id" jdbcType="VARCHAR"/> -->
		
		  
		<association property="purchaseProd" column="prod_no" javaType="product" select="ProductMapper.getProduct" /> 
		<association property="buyer" column="buyer_id" javaType="user" select="UserMapper.getUser"/> 
		
		
		
	</resultMap>
	
	
	
	<!-- SQL : INSERT -->
	<insert 	id="addPurchase"		parameterType="purchase" >
	 	INSERT
		INTO transaction( prod_no, buyer_id, payment_option, receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date , purchase_count) 
		VALUES	 (#{purchaseProd.prodNo}, #{buyer.userId}, #{paymentOption}, #{receiverName}, #{receiverPhone}, #{divyAddr}, #{divyRequest}, #{tranCode}, NOW(), #{divyDate}, #{purchaseCount})
	 </insert>
	 <update id="addPurchaseAfterProduct" parameterType="purchase">
	 	UPDATE product
	 	SET prod_count = prod_count - #{purchaseCount}
	 	WHERE prod_no = #{purchaseProd.prodNo}
	 </update>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getPurchase"	parameterType="int"	resultMap="purchaseSelectMap">
		SELECT
		tran_no, prod_no, buyer_id, payment_option, receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date , purchase_count		
		FROM transaction
		WHERE tran_no = #{value}
	 </select>
	 
	 <select 	id="getPurchase2"	parameterType="int"	resultMap="purchaseSelectMap">
		SELECT
		tran_no, prod_no, buyer_id, payment_option, receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date , purchase_count	
		FROM transaction
		WHERE prod_no = #{value}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updatePurchase"	parameterType="purchase" >
	   	UPDATE transaction
	   	<set>
	   		prod_no = #{purchaseProd.prodNo},
	   		buyer_id = #{buyer.userId},
	   		payment_option = #{paymentOption},
	   		receiver_name = #{receiverName},
	   		receiver_phone = #{receiverPhone},
	   		demailaddr = #{divyAddr},
	   		dlvy_request = #{divyRequest},
	   		tran_status_code = #{tranCode},
	   		order_data = NOW(),
	   		dlvy_date = #{divyDate},
	   		purchase_count = #{purchaseCount}
	   	</set>
	   	WHERE tran_no = #{tranNo}
	 </update>
	 
	 <update	id="updateTranCode"	parameterType="purchase" >
	   	UPDATE transaction
	   	<set>
	   		tran_status_code = #{tranCode}
	   	</set>
	   	WHERE tran_no = #{tranNo}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getPurchaseList"  parameterType="map"	resultMap="purchaseSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , <!-- ROWNUM --> @RNUM := @RNUM+1 AS row_seq
	  					FROM		(	SELECT tran_no, prod_no, buyer_id, payment_option, receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date, purchase_count
											FROM transaction
											WHERE buyer_id = #{buyerId}
											ORDER BY tran_no ) inner_table, (SELECT @RNUM := 0) rownum
						WHERE <!-- ROWNUM --> @RNUM &lt;= #{search.endRowNum} ) test
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum} 
	 </select>
	 
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT tran_no, prod_no, buyer_id, payment_option, receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date, purchase_count
											FROM transaction
						 ) countTable						
	 </select>
	 
</mapper>